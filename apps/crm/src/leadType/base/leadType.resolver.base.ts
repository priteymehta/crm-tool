/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateLeadTypeArgs } from "./CreateLeadTypeArgs";
import { UpdateLeadTypeArgs } from "./UpdateLeadTypeArgs";
import { DeleteLeadTypeArgs } from "./DeleteLeadTypeArgs";
import { LeadTypeFindManyArgs } from "./LeadTypeFindManyArgs";
import { LeadTypeFindUniqueArgs } from "./LeadTypeFindUniqueArgs";
import { LeadType } from "./LeadType";
import { LeadTypeService } from "../leadType.service";
@graphql.Resolver(() => LeadType)
export class LeadTypeResolverBase {
  constructor(protected readonly service: LeadTypeService) {}

  async _leadTypesMeta(
    @graphql.Args() args: LeadTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [LeadType])
  async leadTypes(
    @graphql.Args() args: LeadTypeFindManyArgs
  ): Promise<LeadType[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => LeadType, { nullable: true })
  async leadType(
    @graphql.Args() args: LeadTypeFindUniqueArgs
  ): Promise<LeadType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LeadType)
  async createLeadType(
    @graphql.Args() args: CreateLeadTypeArgs
  ): Promise<LeadType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LeadType)
  async updateLeadType(
    @graphql.Args() args: UpdateLeadTypeArgs
  ): Promise<LeadType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LeadType)
  async deleteLeadType(
    @graphql.Args() args: DeleteLeadTypeArgs
  ): Promise<LeadType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
